import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from db_manager import add_subscription

TOKEN = "8029955410:AAELfmyIB8VriWQqfYimN4RCVzKSMHKsr9s"
bot = telebot.TeleBot(TOKEN)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add("üìå –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
main_menu.add("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", "‚ÑπÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

all_provinces = [
    "A Coru√±a", "Albacete", "Alicante", "Almer√≠a", "Araba", "Asturias", "√Åvila", "Badajoz",
    "Barcelona", "Bizkaia", "Burgos", "C√°ceres", "C√°diz", "Cantabria", "Castell√≥n", "Ceuta",
    "Ciudad Real", "C√≥rdoba", "Cuenca", "Gipuzkoa", "Girona", "Granada", "Guadalajara", "Huelva",
    "Huesca", "Illes Balears", "Ja√©n", "La Rioja", "Las Palmas", "Le√≥n", "Lleida", "Lugo",
    "Madrid", "M√°laga", "Melilla", "Murcia", "Navarra", "Ourense", "Palencia", "Pontevedra",
    "Salamanca", "S.Cruz Tenerife", "Segovia", "Sevilla", "Soria", "Tarragona", "Teruel", "Toledo",
    "Valencia", "Valladolid", "Zamora", "Zaragoza"
]

PROVINCES_PER_PAGE = 8
user_states = {}


def get_province_page(page=0):
    start = page * PROVINCES_PER_PAGE
    end = start + PROVINCES_PER_PAGE
    return all_provinces[start:end]


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–∏—Ç–∞—Ö.",
                     reply_markup=main_menu)


@bot.message_handler(commands=["terms"])
def handle_terms(message):
    bot.send_message(
        message.chat.id,
        "‚úÖ –ú—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º —Å–∏—Ç—ã –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ –∑–∞–ø–∏—Å–µ–π.\n"
        "‚úÖ –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–∏—Ç–∞—Ö.\n"
        "‚úÖ –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç Telegram.\n",
        reply_markup=ReplyKeyboardRemove()
    )


@bot.message_handler(commands=['add_subscription'])
def add_subscription_command(message):
    user_states[message.chat.id] = {}
    show_province_page(message.chat.id, 0)


def show_province_page(chat_id, page):
    provinces_menu = InlineKeyboardMarkup(row_width=2)
    provinces = get_province_page(page)
    buttons = [
        InlineKeyboardButton(province, callback_data=f"choose_province|{province}")
        for province in provinces
    ]
    provinces_menu.add(*buttons)

    if (page + 1) * PROVINCES_PER_PAGE < len(all_provinces):
        provinces_menu.add(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"province_next|{page + 1}")
        )

    bot.send_message(chat_id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é:", reply_markup=provinces_menu)


@bot.callback_query_handler(func=lambda call: call.data.startswith("province_next"))
def province_next_page(call):
    _, page_str = call.data.split("|")
    page = int(page_str)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_province_page(call.message.chat.id, page)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_province"))
def choose_province(call):
    _, province = call.data.split("|")
    user_states[call.message.chat.id]['province'] = province
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é: {province}")
    bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Toma de huellas'):")
    bot.register_next_step_handler(call.message, get_procedure)


def get_procedure(message):
    procedure = message.text.strip()
    user_states[message.chat.id]['procedure'] = procedure
    bot.send_message(message.chat.id, f"üìù –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}")
    ask_all_addresses(message.chat.id)


def ask_all_addresses(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìç –í—Å–µ –∞–¥—Ä–µ—Å–∞", callback_data="addresses_all"),
        InlineKeyboardButton("üè¢ –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="addresses_custom")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "addresses_all")
def addresses_all_handler(call):
    user_states[call.message.chat.id]['addresses'] = ['ALL']
    finalize_subscription(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "addresses_custom")
def addresses_custom_handler(call):
    bot.send_message(call.message.chat.id, "üè¢ –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(call.message, save_addresses)


def save_addresses(message):
    addresses = [addr.strip() for addr in message.text.split(",") if addr.strip()]
    user_states[message.chat.id]['addresses'] = addresses
    finalize_subscription(message)


def finalize_subscription(message):
    chat_id = message.chat.id
    data = user_states[chat_id]
    province = data['province']
    procedure = data['procedure']
    addresses = data['addresses']

    service_name = "7 –¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" # —á–µ–∫–Ω–∏ –≤ –±–æ—Ç–µ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–º –∫—Ä–∞—Å–∏–≤–æ –≤—Å–µ
    phone_number = ""
    user_id = chat_id
    telegram_handle = f"@{message.from_user.username}" if message.from_user.username else ""

    added_sub = add_subscription(user_id, telegram_handle, phone_number, service_name, province, procedure, addresses,
                                 7)

    bot.send_message(chat_id,
                     f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*\n\nüìå *–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:* {procedure}\nüìç *–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:* {province}\nüè¢ *–û—Ç–¥–µ–ª–µ–Ω–∏–µ:* {', '.join(addresses)}\n\n_–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!_",
                     parse_mode="Markdown", reply_markup=main_menu)
    user_states.pop(chat_id, None)


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
