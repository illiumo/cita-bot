import asyncio
import json
import random
from playwright.async_api import async_playwright

CONFIG_FILE = "config.json"
BASE_URL = "https://icp.administracionelectronica.gob.es/icpplus/index.html"

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_3_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Safari/605.1.15",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Windows NT 10.0; rv:99.0) Gecko/20100101 Firefox/99.0",
]

def random_user_agent() -> str:
    return random.choice(USER_AGENTS)

async def human_delay(min_time=1.0, max_time=3.0):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞."""
    await asyncio.sleep(random.uniform(min_time, max_time))

async def random_scroll(page):
    """–õ—ë–≥–∫–∞—è —ç–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏/–ø—Ä–æ–∫—Ä—É—Ç–∫–∏."""
    scroll_distance = random.randint(200, 800)
    await page.mouse.wheel(0, scroll_distance)
    await human_delay(0.5, 1.5)

async def gather_provinces(page):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (name, value) –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π, –∫—Ä–æ–º–µ ¬´Seleccione provincia¬ª."""
    await page.goto(BASE_URL)
    await page.wait_for_selector("select#form")
    province_options = await page.query_selector_all("select#form option")
    province_list = []
    for i in range(1, len(province_options)):
        name = await province_options[i].inner_text()
        value = await province_options[i].get_attribute("value")
        province_list.append((name, value))
    return province_list

async def scrape_provinces(provinces_batch):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∞–∫–µ—Ç—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–π (batch). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏."""
    province_data = {}
    # –°–ª—É—á–∞–π–Ω—ã–π user-agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
    ua = random_user_agent()
    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –±–∞—Ç—á–∞ —Å User-Agent: {ua}")

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        context = await browser.new_context(
            user_agent=ua,
            viewport={"width": 1280, "height": 800}
        )
        page = await context.new_page()

        for province_name, province_value in provinces_batch:
            try:
                print(f"üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é: {province_name}")
                await page.goto(BASE_URL)
                await page.wait_for_selector("select#form")
                await human_delay(1, 3)
                await random_scroll(page)

                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é
                await page.select_option("select#form", value=province_value)
                await human_delay(0.5, 1.5)

                # –ö–ª–∏–∫–∞–µ–º "Aceptar"
                await page.click("input#btnAceptar")
                await page.wait_for_load_state("domcontentloaded")
                await human_delay(1, 3)
                await random_scroll(page)

                province_data[province_name] = {
                    "tramites_oficinas_extranjeria": [],
                    "tramites_policia_nacional": []
                }

                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tramiteGrupo[0] (–æ—Ñ–∏—Å—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω—Ü–µ–≤)
                tramite_0_selector = "select[name='tramiteGrupo[0]']"
                if await page.query_selector(tramite_0_selector):
                    tramites_0_options = await page.query_selector_all(f"{tramite_0_selector} option")
                    for option in tramites_0_options[1:]:
                        text = await option.inner_text()
                        value = await option.get_attribute("value")
                        if value:
                            province_data[province_name]["tramites_oficinas_extranjeria"].append({
                                "nombre": text,
                                "valor": value
                            })
                    await human_delay(0.5, 1.5)
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ tramiteGrupo[0] –≤ {province_name}.")

                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tramiteGrupo[1] (–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–ª–∏—Ü–∏–∏)
                tramite_1_selector = "select[name='tramiteGrupo[1]']"
                if await page.query_selector(tramite_1_selector):
                    tramites_1_options = await page.query_selector_all(f"{tramite_1_selector} option")
                    for option in tramites_1_options[1:]:
                        text = await option.inner_text()
                        value = await option.get_attribute("value")
                        if value:
                            province_data[province_name]["tramites_policia_nacional"].append({
                                "nombre": text,
                                "valor": value
                            })
                    await human_delay(0.5, 1.5)
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ tramiteGrupo[1] –≤ {province_name}.")

                extranjeria_count = len(province_data[province_name]["tramites_oficinas_extranjeria"])
                policia_count = len(province_data[province_name]["tramites_policia_nacional"])
                print(f"‚úÖ {province_name}: extranjer√≠a={extranjeria_count}, polic√≠a={policia_count}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {province_name}: {e}")
                province_data[province_name] = {
                    "tramites_oficinas_extranjeria": [],
                    "tramites_policia_nacional": []
                }
                # –î–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –ø–∞—É–∑—É
                await human_delay(5, 10)

        await browser.close()

    return province_data

async def scrape_all_provinces():
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π, –¥–µ–ª–∏—Ç –Ω–∞ –±–∞—Ç—á–∏, –æ–±—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –±–∞—Ç—á."""
    # –°–ª–æ–≤–∞—Ä—å, –∫—É–¥–∞ –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø–∏—à–µ–º –≤—Å—ë
    final_data = {}

    async with async_playwright() as p:
        # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
        browser = await p.chromium.launch(headless=False)
        context = await browser.new_context()
        page = await context.new_page()
        all_provinces = await gather_provinces(page)
        await browser.close()

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª —Ä–∞–∑–Ω—ã–π
    random.shuffle(all_provinces)

    # –î–æ–ø—É—Å—Ç–∏–º, –º—ã –¥–µ–ª–∏–º –Ω–∞ –±–∞—Ç—á–∏ –ø–æ 10 –ø—Ä–æ–≤–∏–Ω—Ü–∏–π. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
    batch_size = 10
    batches = [all_provinces[i:i + batch_size] for i in range(0, len(all_provinces), batch_size)]

    for batch_index, provinces_batch in enumerate(batches, start=1):
        print(f"=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_index} –∏–∑ {len(batches)} ===")
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –±–∞—Ç—á—É
        batch_data = await scrape_provinces(provinces_batch)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        final_data.update(batch_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤—ë—Ç—Å—è)
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(final_data, f, indent=4, ensure_ascii=False)

        print(f"=== –ë–∞—Ç—á {batch_index} –≥–æ—Ç–æ–≤! ===")



        # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞ ‚Äì –±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã "–æ—Å—Ç—ã—Ç—å"
        if batch_index < len(batches):
            sleep_minutes = random.randint(3, 8)  # –º–µ–Ω—è–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –±–æ–ª–µ–µ –¥–æ–ª–≥–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            print(f"‚è≥ –ñ–¥—ë–º {sleep_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
            await asyncio.sleep(sleep_minutes * 60)

    # –í –∫–æ–Ω—Ü–µ –µ—â—ë —Ä–∞–∑ –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(final_data, f, indent=4, ensure_ascii=False)

    print("‚úÖ –í—Å–µ –±–∞—Ç—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json!")

async def schedule_update():
    """–≠—Ç–æ—Ç —Ü–∏–∫–ª –±—É–¥–µ—Ç —Ä–∞–∑ –≤ —á–∞—Å –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞."""
    while True:
        await scrape_all_provinces()
        print("‚è≥ –ñ–¥—ë–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(schedule_update())