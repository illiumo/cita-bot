# -*- coding: utf-8 -*-
import datetime
import json
import os
import telebot
from telebot.types import (ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton)
from datetime import datetime, timedelta
from db_manager import add_subscription_sqlalchemy

translations = {
    "en": {
        "start": """Hi! üëã\nCita Previa Infobot is an instant notification service ‚ö°Ô∏è that alerts you when appointments become available on the Spanish immigration office‚Äôs website.\nHow does it work?\n1Ô∏è‚É£ Choose your region and the procedure (tr√°mite) you need an appointment for (/add_subscription).\n2Ô∏è‚É£ Subscribe ‚Äî payment can be made by card, Apple ID, or Google Play.\n3Ô∏è‚É£ We monitor the immigration website 24/7 throughout your subscription, saving you time and hassle.\n4Ô∏è‚É£ As soon as an appointment becomes available, we send you a notification in this chat.\n5Ô∏è‚É£ You follow the link and book your appointment yourself!\nüî• Why choose us?\n‚úîÔ∏è Unlimited appointments ‚Äî you can book for yourself and your whole family.\n‚úîÔ∏è Security ‚Äî we don‚Äôt ask for personal data, our service complies with GDPR, and it‚Äôs suitable even for businesses.\n‚úîÔ∏è Flexibility ‚Äî choose the city and time that suits you, and we‚Äôll indicate available locations in the notifications.\n‚úîÔ∏è Ethical ‚Äî we don‚Äôt resell appointments or interfere with the normal operation of the immigration office.\n‚úîÔ∏è Money-back guarantee ‚Äî if you don‚Äôt receive any notifications during your subscription, we‚Äôll refund your money!\nüìå Subscribe now and get notifications about available appointments hassle-free! üöÄ""",
        "select_language": "Select your language:",
        "terms": """‚úÖ We do not sell seats or support illegal markets.\n‚úÖ Our service provides notifications about available slots, simplifying the booking process.\n‚úÖ We do not collect your personal data except for minimal information passed through Telegram, necessary for proper service operation.\n‚úÖ We guarantee service stability and provide a full refund if no notifications are sent within your subscription period.\n‚úÖ We do not guarantee booking success as it depends on your actions. However, most users make a booking within a week.\n‚úÖ The service is provided "as is" without additional guarantees, except in cases explicitly stated in these terms.""",
        "choose_province": "üìç Please select a province:",
        "next": "Next ‚û°Ô∏è",
        "prev": "Back ‚¨ÖÔ∏è",
        "select_language_menu": "Change language",
        "terms_menu": "Terms of service",
        "add_sub_menu": "Add subscription",
        "mng_sub_menu": "Manage my subscription",
    },
    "ru": {
        "start": """–ü—Ä–∏–≤–µ—Ç! üëã\nCita Previa Infobot ‚Äî —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚ö°Ô∏è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å–∏—Ç) –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã –ò—Å–ø–∞–Ω–∏–∏ (—Å–∞–π—Ç —ç–∫—Å—Ç—Ä–∞–Ω—Ö–µ—Ä–∏–∏).\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n1Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É (tr√°mite), –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å (/add_subscription).\n2Ô∏è‚É£ –û—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –æ–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∫–∞—Ä—Ç–æ–π, —á–µ—Ä–µ–∑ Apple ID –∏–ª–∏ Google Play.\n3Ô∏è‚É£ –ú—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–∞–π—Ç —ç–∫—Å—Ç—Ä–∞–Ω—Ö–µ—Ä–∏–∏ 24/7 –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, —ç–∫–æ–Ω–æ–º—è –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –Ω–µ—Ä–≤—ã.\n4Ô∏è‚É£ –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥.\n5Ô∏è‚É£ –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ —Å–∏—Ç—É!\nüî• –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å?\n‚úîÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π ‚Äî –º–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –¥–ª—è —Å–µ–±—è, —Ç–∞–∫ –∏ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏.\n‚úîÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Äî –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–µ—Ä–≤–∏—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GDPR –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n‚úîÔ∏è –ì–∏–±–∫–æ—Å—Ç—å ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –≤—Ä–µ–º—è, –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —É–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏.\n‚úîÔ∏è –≠—Ç–∏—á–Ω–æ—Å—Ç—å ‚Äî –º—ã –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–µ–º —Å–∏—Ç—ã –∏ –Ω–µ –º–µ—à–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã.\n‚úîÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Äî –µ—Å–ª–∏ –∑–∞ –≤–µ—Å—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø—Ä–∏–¥—ë—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏!\nüìå –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–∏—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–±–æ—Ç! üöÄ""" ,
        "select_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "terms": """‚úÖ –ú—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º —Å–∏—Ç—ã –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ –∑–∞–ø–∏—Å–µ–π.\n‚úÖ –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —É—Å–ª—É–≥—É ‚Äì —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–∏—Ç, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏.\n‚úÖ –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π Telegram, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.\n‚úÖ –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω–µ–º –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –∑–∞ –≤–µ—Å—å —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n‚úÖ –ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –û–¥–Ω–∞–∫–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ñ–æ—Ä–º–ª—è—é—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.\n‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è \"–∫–∞–∫ –µ—Å—Ç—å\", –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä—è–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.""",
        "choose_province": "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é:",
        "next": "–î–∞–ª–µ–µ ‚û°Ô∏è",
        "prev": "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
        "select_language_menu": "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫",
        "terms_menu": "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "add_sub_menu": "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "mng_sub_menu": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π",
    },
    "es": {
        "start": """¬°Hola! üëã\nCita Previa Infobot es un servicio de notificaciones instant√°neas ‚ö°Ô∏è sobre la disponibilidad de citas en el portal de la oficina de extranjer√≠a de Espa√±a.\n¬øC√≥mo funciona?\n1Ô∏è‚É£ Seleccionas la regi√≥n y el tr√°mite para el que necesitas una cita (/add_subscription).\n2Ô∏è‚É£ Suscr√≠bete: el pago se puede realizar con tarjeta, Apple ID o Google Play.\n3Ô∏è‚É£ Monitoreamos el sitio web de extranjer√≠a 24/7 durante toda la suscripci√≥n, ahorr√°ndote tiempo y preocupaciones.\n4Ô∏è‚É£ Cuando aparece una cita disponible, te enviamos una notificaci√≥n en este chat.\n5Ô∏è‚É£ Sigues el enlace y reservas tu cita por tu cuenta.\nüî• ¬øPor qu√© elegirnos?\n‚úîÔ∏è Citas ilimitadas: puedes reservar para ti y para toda tu familia.\n‚úîÔ∏è Seguridad: no pedimos datos personales, el servicio cumple con el GDPR y es apto incluso para empresas.\n‚úîÔ∏è Flexibilidad: eliges la ciudad y el horario que prefieras, y te indicamos las ubicaciones disponibles.\n‚úîÔ∏è √âtica: no revendemos citas ni interferimos con el funcionamiento normal de la oficina de extranjer√≠a.\n‚úîÔ∏è Garant√≠a de reembolso: si durante tu suscripci√≥n no recibes ninguna notificaci√≥n, te devolvemos el dinero.\nüìå ¬°Suscr√≠bete y recibe notificaciones sobre citas sin preocupaciones! üöÄ""",
        "select_language": "Selecciona tu idioma:",
        "terms": """‚úÖ No vendemos asientos ni apoyamos mercados ilegales.\n‚úÖ Nuestro servicio proporciona notificaciones sobre espacios disponibles, simplificando el proceso de reserva.\n‚úÖ No recopilamos sus datos personales, excepto la informaci√≥n m√≠nima pasada por Telegram, necesaria para el funcionamiento correcto del servicio.\n‚úÖ Garantizamos la estabilidad del servicio y brindamos un reembolso completo si no se env√≠an notificaciones dentro de su per√≠odo de suscripci√≥n.\n‚úÖ No garantizamos el √©xito de la reserva, ya que depende de sus acciones. Sin embargo, la mayor√≠a de los usuarios hacen una reserva dentro de una semana.\n‚úÖ El servicio se proporciona "tal cual" sin garant√≠as adicionales, excepto en los casos que se indiquen expl√≠citamente en estos t√©rminos.""",
        "choose_province": "üìç Por favor selecciona una provincia:",
        "next": "Siguiente ‚û°Ô∏è",
        "prev": "Atr√°s ‚¨ÖÔ∏è",
        "select_language_menu": "Cambiar idioma",
        "terms_menu": "T√©rminos del servicio",
        "add_sub_menu": "Agregar suscripci√≥n",
        "mng_sub_menu": "Administrar suscripci√≥n",
    },
    "ua": {
        "start": """–ü—Ä–∏–≤—ñ—Ç! üëã\nCita Previa Infobot ‚Äî —Ü–µ —Å–µ—Ä–≤—ñ—Å –º–∏—Ç—Ç—î–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å ‚ö°Ô∏è –ø—Ä–æ –ø–æ—è–≤—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (—Å–∏—Ç) –Ω–∞ –ø–æ—Ä—Ç–∞–ª—ñ —ñ–º–º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–ª—É–∂–±–∏ –Ü—Å–ø–∞–Ω—ñ—ó (—Å–∞–π—Ç –µ–∫—Å—Ç—Ä–∞–Ω—Ö–µ—Ä—ñ—ó).\n–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n1Ô∏è‚É£ –û–±–∏—Ä–∞—î—Ç–µ —Ä–µ–≥—ñ–æ–Ω —ñ –ø—Ä–æ—Ü–µ–¥—É—Ä—É (tr√°mite), –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–∞–ø–∏—Å (/add_subscription).\n2Ô∏è‚É£ –û—Ñ–æ—Ä–º–ª—é—î—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É ‚Äî –æ–ø–ª–∞—Ç–∞ –º–æ–∂–ª–∏–≤–∞ –∫–∞—Ä—Ç–∫–æ—é, —á–µ—Ä–µ–∑ Apple ID –∞–±–æ Google Play.\n3Ô∏è‚É£ –ú–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ —Å–∞–π—Ç –µ–∫—Å—Ç—Ä–∞–Ω—Ö–µ—Ä—ñ—ó 24/7 –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏, –∑–∞–æ—â–∞–¥–∂—É—é—á–∏ –≤–∞—à —á–∞—Å —ñ –Ω–µ—Ä–≤–∏.\n4Ô∏è‚É£ –Ø–∫ —Ç—ñ–ª—å–∫–∏ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –∑–∞–ø–∏—Å, –º–∏ –æ–¥—Ä–∞–∑—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É —Ü–µ–π –¥—ñ–∞–ª–æ–≥.\n5Ô∏è‚É£ –í–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –±—Ä–æ–Ω—é—î—Ç–µ —Å–∏—Ç—É!\nüî• –ß–æ–º—É –≤–∞—Ä—Ç–æ –æ–±—Ä–∞—Ç–∏ –Ω–∞—Å?\n‚úîÔ∏è –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ ‚Äî –º–æ–∂–Ω–∞ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ —è–∫ –¥–ª—è —Å–µ–±–µ, —Ç–∞–∫ —ñ –¥–ª—è –≤—Å—ñ—î—ó —Ä–æ–¥–∏–Ω–∏.\n‚úîÔ∏è –ë–µ–∑–ø–µ–∫–∞ ‚Äî –Ω–µ –∑–∞–ø–∏—Ç—É—î–º–æ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ, —Å–µ—Ä–≤—ñ—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î GDPR —ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –Ω–∞–≤—ñ—Ç—å –¥–ª—è –±—ñ–∑–Ω–µ—Å—É.\n‚úîÔ∏è –ì–Ω—É—á–∫—ñ—Å—Ç—å ‚Äî –æ–±–∏—Ä–∞—î—Ç–µ –∑—Ä—É—á–Ω–µ –º—ñ—Å—Ç–æ —ñ —á–∞—Å, —É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è—Ö –≤–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó.\n‚úîÔ∏è –ï—Ç–∏—á–Ω—ñ—Å—Ç—å ‚Äî –º–∏ –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞—î–º–æ —Å–∏—Ç–∏ —ñ –Ω–µ –∑–∞–≤–∞–∂–∞—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ–π —Ä–æ–±–æ—Ç—ñ —ñ–º–º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–ª—É–∂–±–∏.\n‚úîÔ∏è –ì–∞—Ä–∞–Ω—Ç—ñ—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ ‚Äî —è–∫—â–æ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–µ—Ä–º—ñ–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–¥—ñ–π–¥–µ –∂–æ–¥–Ω–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä–Ω–µ–º–æ –≥—Ä–æ—à—ñ!\nüìå –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É —ñ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—è–≤—É —Å–∏—Ç –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ç—É—Ä–±–æ—Ç! üöÄ""",
        "select_language": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "terms": """‚úÖ –ú–∏ –Ω–µ –ø—Ä–æ–¥–∞—î–º–æ –º—ñ—Å—Ü—è –π –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∏–π —Ä–∏–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤.\n‚úÖ –ù–∞—à —Å–µ—Ä–≤—ñ—Å –Ω–∞–¥–∞—î –ø–æ—Å–ª—É–≥—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º—ñ—Å—Ü—è, —â–æ –∑–Ω–∞—á–Ω–æ —Å–ø—Ä–æ—â—É—î –ø—Ä–æ—Ü–µ—Å –∑–∞–ø–∏—Å—É.\n‚úÖ –ú–∏ –Ω–µ –∑–±–∏—Ä–∞—î–º–æ –≤–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, –∑–∞ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —è–∫—É –ø–µ—Ä–µ–¥–∞—î Telegram, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—ó –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤—ñ—Å—É.\n‚úÖ –ú–∏ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –π –Ω–∞–¥–∞—î–º–æ –ø–æ–≤–Ω–µ –≤—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–µ—Ä–º—ñ–Ω—É –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n‚úÖ –ú–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤–∞—à–∏—Ö –¥—ñ–π. –û–¥–Ω–∞–∫ –±—ñ–ª—å—à—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è.\n‚úÖ –°–µ—Ä–≤—ñ—Å –Ω–∞–¥–∞—î—Ç—å—Å—è "—è–∫ —î" –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π, –∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º –≤–∏–ø–∞–¥–∫—ñ–≤, –ø—Ä—è–º–æ –∑–∞–∑–Ω–∞—á–µ–Ω–∏—Ö —É —Ü–∏—Ö —É–º–æ–≤–∞—Ö.""",
        "choose_province": "üìç –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≤—ñ–Ω—Ü—ñ—é:",
        "next": "–î–∞–ª—ñ ‚û°Ô∏è",
        "prev": "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
        "select_language_menu": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        "terms_menu": "–£–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è",
        "add_sub_menu": "–î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
        "mng_sub_menu": "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é",
    },
}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
all_provinces = [
    "A Coru√±a", "Albacete", "Alicante", "Almer√≠a", "Araba", "Asturias", "√Åvila", "Badajoz",
    "Barcelona", "Bizkaia", "Burgos", "C√°ceres", "C√°diz", "Cantabria", "Castell√≥n", "Ceuta",
    "Ciudad Real", "C√≥rdoba", "Cuenca", "Gipuzkoa", "Girona", "Granada", "Guadalajara", "Huelva",
    "Huesca", "Illes Balears", "Ja√©n", "La Rioja", "Las Palmas", "Le√≥n", "Lleida", "Lugo",
    "Madrid", "M√°laga", "Melilla", "Murcia", "Navarra", "Ourense", "Palencia", "Pontevedra",
    "Salamanca", "S.Cruz Tenerife", "Segovia", "Sevilla", "Soria", "Tarragona", "Teruel", "Toledo",
    "Valencia", "Valladolid", "Zamora", "Zaragoza"
]

user_states = {}

language_file = "user_lang.json"
if not os.path.exists(language_file):
    with open(language_file, "w") as f:
        json.dump({}, f)


def load_user_lang():
    with open(language_file, "r") as f:
        return json.load(f)


def save_user_lang():
    with open(language_file, "w") as f:
        json.dump(user_lang, f)


user_lang = load_user_lang()

TOKEN = "8029955410:AAELfmyIB8VriWQqfYimN4RCVzKSMHKsr9s"
bot = telebot.TeleBot(TOKEN)


def get_main_menu(user_id):
    lang = user_lang.get(user_id, "en")
    main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu.add(KeyboardButton(get_translation(user_id, "select_language_menu")))
    main_menu.add(KeyboardButton(get_translation(user_id, "terms_menu")))
    main_menu.add(KeyboardButton(get_translation(user_id, "add_sub_menu")))
    main_menu.add(KeyboardButton(get_translation(user_id, "mng_sub_menu")))
    return main_menu


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    bot.send_message(user_id, get_translation(user_id, "start"), reply_markup=get_main_menu(user_id))


@bot.message_handler(func=lambda message: message.text in [
    get_translation(message.chat.id, "select_language_menu"),
    get_translation(message.chat.id, "terms_menu"),
    get_translation(message.chat.id, "add_sub_menu"),
    get_translation(message.chat.id, "mng_sub_menu"),
])
def handle_buttons(message):
    user_id = message.chat.id
    if message.text == get_translation(user_id, "select_language_menu"):
        language(message)
    elif message.text == get_translation(user_id, "terms_menu"):
        handle_terms(message)
    elif message.text == get_translation(user_id, "add_sub_menu"):
        add_subscription_command(message)
    elif message.text == get_translation(user_id, "mng_sub_menu"):
        bot.send_message(user_id, "This feature is not yet implemented.")

@bot.message_handler(commands=["language"])
def language(message):
    lang_menu = InlineKeyboardMarkup()
    lang_menu.add(InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="lang_es"))
    lang_menu.add(InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"))
    lang_menu.add(InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π" , callback_data="lang_ru"))
    lang_menu.add(InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" , callback_data="lang_ua"))
    bot.send_message(message.chat.id, get_translation(message.chat.id, "select_language"), reply_markup=lang_menu)

file_path = "/Utils/config.json"
PROVINCES_PER_PAGE = 8
PROCEDURES_PER_PAGE = 8



@bot.message_handler(commands=["terms"])
def handle_terms(message):
    user_id = message.chat.id
    bot.send_message(user_id, get_translation(user_id, "terms"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_next_"))
def next_page_callback(call):
    page = int(call.data.split("_")[-1])
    add_subscription_command(call.message, page=page, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def set_language(call):
    lang_code = call.data.split("_")[-1]
    user_lang[call.message.chat.id] = lang_code
    save_user_lang()
    bot.answer_callback_query(call.id, "Language updated!")
    bot.send_message(
        call.message.chat.id,
        get_translation(call.message.chat.id, "start"),
        reply_markup=get_main_menu(call.message.chat.id),
    )

def get_translation(user_id, k):
    lang = user_lang.get(user_id, "en")
    return translations.get(lang, {}).get(k, "Translation not found!")

def ask_all_addresses(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–í—Å–µ –∞–¥—Ä–µ—Å–∞", callback_data="addresses_all"),
        InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="addresses_custom")
    )
    bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "addresses_all")
def addresses_all_handler(call):
    user_states[call.message.chat.id]['addresses'] = ['ALL']
    finalize_subscription(call)


@bot.message_handler(commands=['add_subscription'])
def add_subscription_command(message):
    user_states[message.chat.id] = {}
    show_province_page(message.chat.id, 0)


def get_province_page(page=0):
    start = page * PROVINCES_PER_PAGE
    end = start + PROVINCES_PER_PAGE
    return all_provinces[start:end]

def get_procedures_by_province(province_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    with open(file_path, "r", encoding="utf-8") as file:
        data = json.load(file)

    province_data = data.get(province_name, {})

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    procedures = []
    for category in ["tramites_oficinas_extranjeria", "tramites_policia_nacional"]:
        if category in province_data:
            procedures.extend(province_data[category])  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã

    return procedures  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å



def get_procedures_page(province_name, page=0):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    all_procedures = get_procedures_by_province(province_name)

    if not isinstance(all_procedures, list):
        print(f"‚ùå –û—à–∏–±–∫–∞! –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(all_procedures)} -> {all_procedures}")
        return []

    start = page * PROCEDURES_PER_PAGE
    end = start + PROCEDURES_PER_PAGE
    return all_procedures[start:end]



def show_province_page(chat_id, page):
    provinces_menu = InlineKeyboardMarkup(row_width=2)
    provinces = get_province_page(page)
    buttons = [
        InlineKeyboardButton(province, callback_data=f"choose_province|{province}")
        for province in provinces
    ]
    provinces_menu.add(*buttons)

    if (page + 1) * PROVINCES_PER_PAGE < len(all_provinces):
        provinces_menu.add(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"province_next|{page + 1}")
        )

    bot.send_message(chat_id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é:", reply_markup=provinces_menu)


def show_procedures_page(chat_id, page, message_id=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"."""
    province = user_states.get(chat_id, {}).get("province")
    if not province:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    procedures = get_procedures_page(province, page)

    if not procedures:
        bot.send_message(chat_id, f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è {province}.")
        return

    procedures_menu = InlineKeyboardMarkup(row_width=1)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä
    buttons = [
        InlineKeyboardButton(proc["nombre"], callback_data=f"choose_procedure|{proc['valor']}")
        for proc in procedures if isinstance(proc, dict) and "nombre" in proc and "valor" in proc
    ]

    if not buttons:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.")
        return

    procedures_menu.add(*buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏"
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"procedures_prev|{page - 1}"))
    if (page + 1) * PROCEDURES_PER_PAGE < len(get_procedures_by_province(province)):
        navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"procedures_next|{page + 1}"))

    if navigation_buttons:
        procedures_menu.add(*navigation_buttons)

    procedures_menu.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏", callback_data="back_to_provinces"))

    last_message_id = user_states.get(chat_id, {}).get("last_message_id")
    if last_message_id:
        try:
            bot.delete_message(chat_id, last_message_id)
        except:
            pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    sent_message = bot.send_message(chat_id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=procedures_menu)
    user_states[chat_id]["last_message_id"] = sent_message.message_id

@bot.callback_query_handler(func=lambda call: call.data == "back_to_provinces")
def back_to_provinces(call):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏"""
    chat_id = call.message.chat.id
    show_province_page(chat_id, 0)
    bot.delete_message(chat_id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("procedures_prev"))
def procedures_prev_page(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    chat_id = call.message.chat.id
    page = int(call.data.split("|")[-1])
    show_procedures_page(chat_id, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith("procedures_next"))
def procedures_next_page(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    chat_id = call.message.chat.id
    page = int(call.data.split("|")[-1])
    show_procedures_page(chat_id, page)

@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_province"))
def choose_province(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É"""
    _, province = call.data.split("|")
    chat_id = call.message.chat.id
    user_states[chat_id] = {'province': province}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é –≤ user_states
    bot.delete_message(chat_id, call.message.message_id)
    bot.send_message(chat_id, f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é: {province}")
    show_procedures_page(chat_id, 0)

def get_procedure(message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É."""
    chat_id = message.chat.id
    procedure = message.text.strip()
    user_states[chat_id]['procedure'] = procedure

    bot.send_message(chat_id, f"üìù –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure}")
    ask_all_addresses(chat_id)

###############################################################################
# –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–æ–≤: –≤—Å–µ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
###############################################################################
def ask_all_addresses(chat_id):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å: –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ."""
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìç –í—Å–µ –∞–¥—Ä–µ—Å–∞", callback_data="addresses_all"),
        InlineKeyboardButton("üè¢ –£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞", callback_data="addresses_custom")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "addresses_all")
def addresses_all_handler(call):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Å–µ –∞–¥—Ä–µ—Å–∞."""
    chat_id = call.message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /add_subscription.")
        return

    user_states[chat_id]['addresses'] = ['ALL']
    select_subscription_plan(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "addresses_custom")
def addresses_custom_handler(call):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é."""
    chat_id = call.message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /add_subscription.")
        return

    bot.send_message(chat_id, "üè¢ –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(call.message, save_addresses)

def save_addresses(message):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å(–∞) –≤ —Ç–µ–∫—Å—Ç–µ."""
    chat_id = message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /add_subscription.")
        return

    addresses = [addr.strip() for addr in message.text.split(",") if addr.strip()]
    user_states[chat_id]['addresses'] = addresses
    select_subscription_plan(message)

###############################################################################
# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
###############################################################################
def select_subscription_plan(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏: 7 –¥–Ω–µ–π, 14 –¥–Ω–µ–π, 30 –¥–Ω–µ–π."""
    chat_id = message.chat.id
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚≠ê 750 –Ω–∞ 7 –¥–Ω–µ–π", callback_data="sub_7"),
        InlineKeyboardButton("üëç 1500 –Ω–∞ 14 –¥–Ω–µ–π", callback_data="sub_14"),
        InlineKeyboardButton("üìÖ 2500 –Ω–∞ 30 –¥–Ω–µ–π", callback_data="sub_30")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

###############################################################################
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
###############################################################################
@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))
def finalize_subscription(call):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (7, 14, 30 –¥–Ω–µ–π)."""
    chat_id = call.message.chat.id
    try:
        # –ò–∑ call.data —Ç–∏–ø–∞ "sub_7" –≤—ã–¥–µ–ª—è–µ–º "7"
        days_str = call.data.split("_")[1]
        days = int(days_str)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_states
        data = user_states.get(chat_id, {})
        if not data:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (/add_subscription).")
            return

        # –ü—Ä–∏–º–µ—Ä –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è (–ø–æ–∫–∞ —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ datetime)
        expiration_date = (datetime.utcnow() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")

        # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
        # (–≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–º–∏: add_subscription_sqlalchemy, –Ω–∞–ø—Ä–∏–º–µ—Ä)
        # –ò–ª–∏ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ expiration_date, –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç—É–¥–∞ —Ç–æ–∂–µ
        added_sub = add_subscription_sqlalchemy(
            user_id=chat_id,
            telegram_handle=f"@{call.from_user.username}" if call.from_user.username else "",
            phone_number="",
            service_name=f"{days} –¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
            province=data.get('province', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            procedure=data.get('procedure', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            addresses=data.get('addresses', ['ALL']),
            subscription_days=days,
        )

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(
            chat_id,
            "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!* üéâ\n\n"
            f"üìå *–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:* {data.get('procedure', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç *–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:* {data.get('province', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè¢ *–û—Ç–¥–µ–ª–µ–Ω–∏–µ:* {', '.join(data.get('addresses', ['ALL']))}\n"
            f"üìÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {expiration_date}\n\n"
            "_–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!_",
            parse_mode="Markdown"
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(chat_id, None)

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
