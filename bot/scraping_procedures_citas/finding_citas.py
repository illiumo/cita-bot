import asyncio
import unicodedata
import random
from playwright.async_api import async_playwright

PROVINCIA = "Asturias"#Ceuta
PROCEDURA = "FAMILIARES DE RESIDENTES COMUNITARIOS"#"POLIC√çA - COMUNICACI√ìN DE CAMBIO DE DOMICILIO"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
ID_CITADO_VALUE = "Z8579791Z"    # txtIdCitado
DES_CITADO_VALUE = "ALBERTO SORDI"  # txtDesCitado
PAIS_NAC_VALUE = "ARMENIA"         # txtPaisNac
AGE_VALUE = "2000" #txtAnnoCitado

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15"
]


def random_user_agent() -> str:
    return random.choice(USER_AGENTS)


async def human_delay(min_time=0.5, max_time=1.0):
    """–†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞."""
    await asyncio.sleep(random.uniform(min_time, max_time))


def normalize_text(text):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ü–µ–Ω—Ç—ã, –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    text = unicodedata.normalize("NFKD", text).encode("ASCII", "ignore").decode("utf-8")
    return " ".join(text.strip().lower().split())


async def find_available_appointments(provincia, tramite):
    headers = {
        "User-Agent": random_user_agent(),
        "Accept-Language": "es-ES,es;q=0.9,en;q=0.8"
    }

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        context = await browser.new_context(user_agent=headers["User-Agent"])
        page = await context.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = await page.goto("https://icp.administracionelectronica.gob.es/icpplus/index.html",
                                   wait_until="domcontentloaded")
        if response and response.status == 429:
            print("‚ùå –ü–æ–ª—É—á–∏–ª–∏ 429 Too Many Requests. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
            await browser.close()
            return

        await page.wait_for_selector("select#form")

        # 1. –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∏–Ω—Ü–∏—é
        provincias = await page.query_selector_all("select#form option")
        provincia_value = None
        for option in provincias:
            name = await option.inner_text()
            if normalize_text(name) == normalize_text(provincia):
                provincia_value = await option.get_attribute("value")
                break

        if not provincia_value:
            print(f"‚ùå –ü—Ä–æ–≤–∏–Ω—Ü–∏—è '{provincia}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await browser.close()
            return

        await page.select_option("select#form", value=provincia_value)
        await human_delay()
        await page.click("input#btnAceptar")
        await page.wait_for_load_state("domcontentloaded")

        # 2. –ò—â–µ–º –Ω—É–∂–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É (tramiteGrupo[0] –∏–ª–∏ tramiteGrupo[1])
        tramite_0_selector = "select[name='tramiteGrupo[0]']"
        tramite_1_selector = "select[name='tramiteGrupo[1]']"

        if tramite.startswith("POLIC√çA"):
            tramites_list_selector = tramite_1_selector
        else:
            tramites_list_selector = tramite_0_selector

        await page.wait_for_selector(tramites_list_selector)
        tramites_options = await page.query_selector_all(f"{tramites_list_selector} option")

        tramite_value = None
        for option in tramites_options[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é –æ–ø—Ü–∏—é
            text = normalize_text(await option.inner_text())
            value = await option.get_attribute("value")
            if text == normalize_text(tramite):
                tramite_value = value
                break

        if not tramite_value:
            print(f"‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '{tramite}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ '{provincia}'.")
            await browser.close()
            return

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É
        await page.select_option(tramites_list_selector, value=tramite_value)
        await human_delay()
        await page.click("input#btnAceptar")
        await page.wait_for_load_state("domcontentloaded")

        # 3. –ù–∞–∂–∏–º–∞–µ–º "Entrar"
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∫–Ω–æ–ø–∫—É 'Entrar'...")
        entrar_button = None
        try:
            entrar_button = await page.wait_for_selector("input[value='Entrar']", timeout=10000)
        except:
            entrar_button = None

        if not entrar_button:
            print("‚ùå –ö–Ω–æ–ø–∫–∞ 'Entrar' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await browser.close()
            return

        await human_delay()
        await entrar_button.click()
        await page.wait_for_load_state("domcontentloaded")

        # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É (txtIdCitado, txtDesCitado, txtPaisNac...)
        print("‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É txtIdCitado, txtDesCitado, txtPaisNac...")

        # NIE/ID
        await page.fill("#txtIdCitado", ID_CITADO_VALUE)
        # –§–ò–û
        await page.fill("#txtDesCitado", DES_CITADO_VALUE)
        #Age
        age_selector = await page.query_selector("#txtAnnoCitado")
        if age_selector:
            await page.fill("#txtAnnoCitado", AGE_VALUE)
        # –°—Ç—Ä–∞–Ω–∞
        pais_nac_selector = await page.query_selector("#txtPaisNac")
        if pais_nac_selector:
            await page.select_option("#txtPaisNac", label=PAIS_NAC_VALUE)
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –°–µ–ª–µ–∫—Ç–æ—Ä #txtPaisNac –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        #await page.select_option("#txtPaisNac", label=PAIS_NAC_VALUE)
        # –ï—Å–ª–∏ –≤ <option> –Ω–µ—Ç label=..., –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ value=...

        await human_delay()
        # –ù–∞–∂–∏–º–∞–µ–º "Enviar" (–∏–ª–∏ "Aceptar")
        btn_enviar = await page.wait_for_selector("input#btnEnviar", state="visible", timeout=5000)

        if btn_enviar:
            is_disabled = await page.evaluate("(el) => el.disabled", btn_enviar)
            if is_disabled:
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'Enviar' –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
            else:
                await btn_enviar.scroll_into_view_if_needed()
                await human_delay()
                await btn_enviar.click()

        await page.wait_for_load_state("domcontentloaded")

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "no hay citas" (–∏–ª–∏ "En este momento no hay citas disponibles")
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        no_citas_selector = "div:has-text('no hay citas disponibles')"
        # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–π CSS, –µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–∞–ø—Ä.: .msgErrorText

        if await page.query_selector(no_citas_selector):
            # –ó–Ω–∞—á–∏—Ç, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
            print("‚ùå En este momento no hay citas disponibles!")
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "Aceptar":
            accept_btn = await page.query_selector("input[value='Aceptar']")  # –∏–ª–∏ button
            if accept_btn:
                await accept_btn.click()
            await browser.close()
            return

        # 6. –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ¬´no hay citas¬ª, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Ñ—Ñ–∏—Å–∞–º–∏ (idSede)
        id_sede_selector = "#idSede"  # –ü—Ä–∏–º–µ—Ä
        if await page.query_selector(id_sede_selector):
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ñ–∏—Å—ã
            options = await page.query_selector_all(f"{id_sede_selector} option")
            available_offices = []
            for opt in options:
                office_text = await opt.inner_text()
                office_val = await opt.get_attribute("value")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é –æ–ø—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
                if office_val and office_val.strip():
                    available_offices.append((office_text.strip(), office_val.strip()))

            print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ–∏—Å—ã:")
            for idx, (text, val) in enumerate(available_offices, start=1):
                print(f"{idx}. {text} [value={val}]")

            # –ú–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "Siguiente" –∏ —Ç.–¥. ‚Äî –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
            # next_btn = await page.query_selector("input[value='Siguiente']")
            # if next_btn:
            #     await next_btn.click()
            #     ...–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ

        else:
            # –ò–Ω–∞—á–µ, –Ω–∏ "no hay citas" —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∏ "#idSede" ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
            print("‚ö†Ô∏è –ù–∏ –æ—Ñ–∏—Å, –Ω–∏ –æ—à–∏–±–∫–∞. –°–º–æ—Ç—Ä–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å HTML —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        html_content = await page.content()
        print("\nüîé HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n")
        print(html_content[:500])

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        await browser.close()


# –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
asyncio.run(find_available_appointments(PROVINCIA, PROCEDURA))
