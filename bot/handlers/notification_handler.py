from bot.bot_instance import bot
from database.setup import SessionLocal
from database.models import Subscription
from collections import defaultdict
from bot.utils.state_manager import file_path as filepath
import json
import telebot
import re


def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2, –Ω–æ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã."""
    escape_chars = r'_*[\]()~`>#+=|{}.!'  # –ò—Å–∫–ª—é—á–∞–µ–º –¥–µ—Ñ–∏—Å `-`
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


def get_active_subscriptions():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å telegram_id, province, procedure"""
    session = SessionLocal()
    try:
        active_subs = session.query(Subscription.telegram_id, Subscription.province, Subscription.procedure) \
            .filter(Subscription.status == 'active') \
            .all()

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subs)}")  # –û—Ç–ª–∞–¥–∫–∞
        if not active_subs:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            print(active_subs)  # –í—ã–≤–µ–¥–µ—Ç —Å–∞–º–∏ –∑–∞–ø–∏—Å–∏

        return active_subs
    finally:
        session.close()


def get_procedure_name(procedure_id):
    """–ò—â–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ config.json –ø–æ –µ—ë ID."""
    if not procedure_id:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞"

    try:
        with open(filepath, "r", encoding="utf-8") as file:
            data = json.load(file)

        for province in data.values():
            for category in ["tramites_oficinas_extranjeria", "tramites_policia_nacional"]:
                for procedure in province.get(category, []):
                    if procedure.get("valor") == procedure_id:
                        return procedure.get("nombre")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        return procedure_id  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º ID
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ config.json: {e}")
        return procedure_id


def group_subscriptions_by_province_and_procedure():
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ."""
    subscriptions = get_active_subscriptions()
    grouped = defaultdict(lambda: defaultdict(set))  # {province: {procedure: {telegram_id}}}

    if not subscriptions:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return grouped

    for telegram_id, province, procedure in subscriptions:
        if not province or not procedure:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ {telegram_id} –∏–º–µ–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            continue

        grouped[province][procedure].add(telegram_id)

    print(f"‚úÖ DEBUG: grouped_data = {dict(grouped)}")  # –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã grouped_data
    return grouped


def send_notifications(grouped_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    grouped_data ‚Äî —ç—Ç–æ { "province": { "procedure": {telegram_id, telegram_id} } }
    """
    if not grouped_data:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    print("üì¢ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    for province, procedures in grouped_data.items():
        for procedure_id, telegram_ids in procedures.items():
            procedure_name = get_procedure_name(procedure_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            province_escaped = escape_markdown_v2(province)
            procedure_name_escaped = escape_markdown_v2(procedure_name)

            message = (
                f"üî• *{procedure_name_escaped}* \\({province_escaped}\\) üî•\n\n"
                f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É *{procedure_name_escaped}* —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞!\n"
                f"üìÖ –í —Ä–µ–≥–∏–æ–Ω–µ *{province_escaped}* –ø–æ—è–≤–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.\n\n"
                f"üîó *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:*\n"
                f"[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://icp.administracionelectronica.gob.es/icpplus/citar?p=33&locale=es)\n\n"
                f"‚è≥ *–ü–æ—Å–ø–µ—à–∏—Ç–µ, –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!*"
            )

            for telegram_id in telegram_ids:
                print(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {telegram_id}")
                try:
                    bot.send_message(telegram_id, message, parse_mode="MarkdownV2", disable_web_page_preview=True)
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_id}: {e}")
                    if "can't parse entities" in str(e):
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MarkdownV2. –ü—Ä–æ–≤–∏–Ω—Ü–∏—è: {province}, –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_name}")
                        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                        fallback_message = (
                            f"üî• {procedure_name} ({province}) üî•\n\n"
                            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É {procedure_name} —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞!\n"
                            f"üìÖ –í —Ä–µ–≥–∏–æ–Ω–µ {province} –ø–æ—è–≤–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã.\n\n"
                            f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:\n"
                            f"https://icp.administracionelectronica.gob.es/icpplus/citar?p=33&locale=es\n\n"
                            f"‚è≥ –ü–æ—Å–ø–µ—à–∏—Ç–µ, –º–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!"
                        )
                        bot.send_message(telegram_id, fallback_message, parse_mode=None, disable_web_page_preview=True)
                    elif "chat not found" in str(e):
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_id}: {e}")


def check_and_notify_users():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å: –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    grouped_data = group_subscriptions_by_province_and_procedure()
    send_notifications(grouped_data)


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
check_and_notify_users()
