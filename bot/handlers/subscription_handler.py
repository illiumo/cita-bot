import json
import datetime
from datetime import timedelta
import re
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from database.setup import SessionLocal
from database.models import User, Subscription
from bot.handlers.language_handler import all_provinces
from bot.bot_instance import bot
from bot.utils.state_manager import user_states, file_path

PROVINCES_PER_PAGE = 8
PROCEDURES_PER_PAGE = 8
OFFICES_PER_PAGE = 8


###############################################################################
#                       –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–î
###############################################################################
def add_subscription_sqlalchemy(
        user_id,
        telegram_id,
        telegram_handle,
        phone_number,
        service_name,
        province,
        procedure,
        addresses,
        subscription_days
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î (SQLAlchemy).
    """
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter_by(telegram_id=str(user_id)).first()
        if not user:
            user = User(telegram_id=str(user_id))
            session.add(user)
            session.commit()

        now = datetime.datetime.now()
        expires = now + datetime.timedelta(days=subscription_days)

        subscription = Subscription(
            user_id=user.user_id,
            telegram_id=telegram_id,
            service_name=service_name,
            province=province,
            procedure=procedure,
            addresses=addresses,  # ARRAY(String) –≤ –º–æ–¥–µ–ª–∏
            purchase_date=now,
            expiration_date=expires,
            status='active'
        )
        session.add(subscription)
        session.commit()
        return subscription
    finally:
        session.close()


###############################################################################
#                       –°–¢–ê–†–¢ –ü–û–î–ü–ò–°–ö–ò
###############################################################################
@bot.message_handler(commands=['add_subscription'])
def add_subscription_command(message):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    user_states[message.chat.id] = {}
    show_province_page(message.chat.id, 0)


###############################################################################
#                      –í–´–ë–û–† –ü–†–û–í–ò–ù–¶–ò–ò
###############################################################################
def get_province_page(page=0):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    start = page * PROVINCES_PER_PAGE
    end = start + PROVINCES_PER_PAGE
    return all_provinces[start:end]


def show_province_page(chat_id, page=0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    provinces_menu = InlineKeyboardMarkup(row_width=2)
    provinces = get_province_page(page)
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π
    buttons = [
        InlineKeyboardButton(prov, callback_data=f"choose_province|{prov}")
        for prov in provinces
    ]
    provinces_menu.add(*buttons)

    # –ö–Ω–æ–ø–∫–∞ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª, –µ—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å
    if (page + 1) * PROVINCES_PER_PAGE < len(all_provinces):
        provinces_menu.add(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"province_next|{page + 1}")
        )

    sent_message = bot.send_message(chat_id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é:", reply_markup=provinces_menu)

    user_states.setdefault(chat_id, {})
    user_states[chat_id]["last_message_id"] = sent_message.message_id
    return sent_message


@bot.callback_query_handler(func=lambda call: call.data.startswith("province_next"))
def province_next_page(call):
    """
    –õ–∏—Å—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∏–Ω—Ü–∏–π –≤–ø–µ—Ä—ë–¥.
    """
    chat_id = call.message.chat.id
    page = int(call.data.split("|")[-1])

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    show_province_page(chat_id, page)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_province"))
def choose_province(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–≤–∏–Ω—Ü–∏—é. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä.
    """
    chat_id = call.message.chat.id
    _, province = call.data.split("|")
    telegram_id = call.from_user.id
    user_states[chat_id] = {"province": province}
    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = session.query(User).filter_by(telegram_id=str(telegram_id)).first()
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(telegram_id=str(telegram_id))
            session.add(user)
            session.commit()

    finally:
        session.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º user_states
    if chat_id not in user_states:
        user_states[chat_id] = {}  # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ

    user_states[chat_id]["province"] = province
    user_states[chat_id]["telegram_id"] = telegram_id  # –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º telegram_id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    sent_message = show_procedures_page(chat_id, 0)
    user_states[chat_id]["last_message_id"] = sent_message.message_id


###############################################################################
#                      –í–´–ë–û–† –ü–†–û–¶–ï–î–£–†–´
###############################################################################
def get_procedures_by_province(province_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä (—Å–ª–æ–≤–∞—Ä–µ–π) –ø–æ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏–∑ config.json.
    """
    with open(file_path, "r", encoding="utf-8") as file:
        data = json.load(file)

    province_data = data.get(province_name, {})
    procedures = []
    for category in ["tramites_oficinas_extranjeria", "tramites_policia_nacional"]:
        if category in province_data:
            procedures.extend(province_data[category])
    return procedures


def get_procedures_page(province_name, page=0):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–∫—É—Å–æ–∫" –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    all_procedures = get_procedures_by_province(province_name)
    start = page * PROCEDURES_PER_PAGE
    end = start + PROCEDURES_PER_PAGE
    return all_procedures[start:end]


def show_procedures_page(chat_id, page=0):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    province = user_states.get(chat_id, {}).get("province")
    if not province:
        return bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–∏–Ω—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")

    procedures = get_procedures_page(province, page)
    if not procedures:
        return bot.send_message(chat_id, f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è {province}.")

    procedures_menu = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton(
            proc["nombre"],
            callback_data=f"choose_procedure|{proc['valor']}"
        )
        for proc in procedures
        if isinstance(proc, dict) and "nombre" in proc and "valor" in proc
    ]
    if not buttons:
        return bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.")

    procedures_menu.add(*buttons)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    all_p = get_procedures_by_province(province)
    nav_btns = []
    if page > 0:
        nav_btns.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"procedures_prev|{page - 1}"))
    if (page + 1) * PROCEDURES_PER_PAGE < len(all_p):
        nav_btns.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"procedures_next|{page + 1}"))
    if nav_btns:
        procedures_menu.add(*nav_btns)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏¬ª
    procedures_menu.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏", callback_data="back_to_provinces"))

    text = f"üìå –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–∏–Ω—Ü–∏—é: {province}\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:"
    sent_message = bot.send_message(chat_id, text, reply_markup=procedures_menu)

    user_states[chat_id]["last_message_id"] = sent_message.message_id
    return sent_message


@bot.callback_query_handler(func=lambda call: call.data.startswith("procedures_prev"))
def procedures_prev_page(call):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä: –Ω–∞–∑–∞–¥."""
    chat_id = call.message.chat.id
    page = int(call.data.split("|")[-1])

    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    show_procedures_page(chat_id, page)


@bot.callback_query_handler(func=lambda call: call.data.startswith("procedures_next"))
def procedures_next_page(call):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä: –≤–ø–µ—Ä—ë–¥."""
    chat_id = call.message.chat.id
    page = int(call.data.split("|")[-1])

    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    show_procedures_page(chat_id, page)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_provinces")
def back_to_provinces(call):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≤–∏–Ω—Ü–∏–π."""
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä)
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    show_province_page(chat_id, 0)


###############################################################################
#                     –í–´–ë–û–† –û–§–ò–°–ê/–ê–î–†–ï–°–ê –ü–û–°–õ–ï –ü–†–û–¶–ï–î–£–†–´
###############################################################################
def get_offices_for_procedure(province_name, procedure_val):
    """
    –ó–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤ (—Å–ª–æ–≤–∞—Ä–µ–π) –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ.
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ JSON, –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    # –ó–¥–µ—Å—å –≤–µ—Ä–Ω—ë–º –ø–∞—Ä—É –æ—Ñ–∏—Å–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ 'id'
    return [
        {"id": "oficina_1", "name": "Oficina Extranjer√≠a #1"},
        {"id": "oficina_2", "name": "Oficina Extranjer√≠a #2"},
        {"id": "oficina_3", "name": "Comisar√≠a Polic√≠a - Toma de Huellas"}
    ]


def show_offices_page(chat_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤, –ø–ª—é—Å –∫–Ω–æ–ø–∫—É ¬´–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è¬ª.
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    province = user_states[chat_id].get("province")
    procedure_val = user_states[chat_id].get("procedure_val", "(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)")

    offices = get_offices_for_procedure(province, procedure_val)

    offices_menu = InlineKeyboardMarkup(row_width=1)

    # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
    offices_menu.add(InlineKeyboardButton("‚úÖ –í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è", callback_data="offices_all"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ñ–∏—Å—ã
    for office in offices:
        offices_menu.add(
            InlineKeyboardButton(
                f"üè¢ {office['name']}",
                callback_data=f"choose_office|{office['id']}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä¬ª
    offices_menu.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", callback_data="back_to_procedures_list")
    )

    text = (
        f"–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_val}\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ {province}:\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è'."
    )

    sent_message = bot.send_message(
        chat_id,
        text,
        reply_markup=offices_menu
    )
    user_states[chat_id]["last_message_id"] = sent_message.message_id
    return sent_message


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_procedure"))
def choose_procedure(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–∏—Å–æ–≤.
    """
    chat_id = call.message.chat.id
    _, procedure_val = call.data.split("|")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    user_states[chat_id]["procedure_val"] = procedure_val

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä)
    if "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–∏—Å–æ–≤
    sent_message = show_offices_page(chat_id)
    user_states[chat_id]["last_message_id"] = sent_message.message_id


@bot.callback_query_handler(func=lambda call: call.data == "offices_all")
def offices_all_handler(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è".
    """
    chat_id = call.message.chat.id
    user_states[chat_id]["addresses"] = ["ALL_OFFICES"]

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤)
    if "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
    select_subscription_plan(chat_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_office"))
def choose_office_handler(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ñ–∏—Å,
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ addresses –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∞—Ä–∏—Ñ—É.
    """
    chat_id = call.message.chat.id
    _, office_id = call.data.split("|")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –æ—Ñ–∏—Å–∞
    user_states[chat_id]["addresses"] = [office_id]

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    # –î–∞–ª—å—à–µ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    select_subscription_plan(chat_id)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_procedures_list")
def back_to_procedures_list_handler(call):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Å–æ–≤.
    """
    chat_id = call.message.chat.id
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤)
    if "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    sent_message = show_procedures_page(chat_id, 0)
    user_states[chat_id]["last_message_id"] = sent_message.message_id


###############################################################################
#                    –í–´–ë–û–† –¢–ê–†–ò–§–ê -> –û–§–û–†–ú–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò
###############################################################################
def select_subscription_plan(chat_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏: 7 –¥–Ω–µ–π, 14 –¥–Ω–µ–π, 30 –¥–Ω–µ–π.
    (–í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö ask_all_addresses)
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if chat_id in user_states and "last_message_id" in user_states[chat_id]:
        try:
            bot.delete_message(chat_id, user_states[chat_id]["last_message_id"])
        except:
            pass

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚≠ê 750 –Ω–∞ 7 –¥–Ω–µ–π", callback_data="sub_7"),
        InlineKeyboardButton("üëç 1500 –Ω–∞ 14 –¥–Ω–µ–π", callback_data="sub_14"),
        InlineKeyboardButton("üìÖ 2500 –Ω–∞ 30 –¥–Ω–µ–π", callback_data="sub_30")
    )
    sent_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

    user_states.setdefault(chat_id, {})
    user_states[chat_id]["last_message_id"] = sent_message.message_id


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown."""
    return re.sub(r'([_*[\]()~`>#+-=|{}.!])', r'\\\1', text)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))
def finalize_subscription(call):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ (7, 14, 30 –¥–Ω–µ–π).
    """
    chat_id = call.message.chat.id
    try:
        days_str = call.data.split("_")[1]
        days = int(days_str)

        data = user_states.get(chat_id, {})
        if not data:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (/add_subscription).")
            return

        expiration_date = (datetime.datetime.utcnow() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
        print(f"DEBUG: user_states[{chat_id}] = {user_states.get(chat_id, {})}")
        print(f"DEBUG: telegram_id = {user_states.get(chat_id, {}).get('telegram_id')}")
        telegram_id = user_states.get(chat_id, {}).get("telegram_id")
        if not telegram_id:
            telegram_id = call.from_user.id  # –ë–µ—Ä—ë–º ID –∏–∑ Telegram, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ user_states
            user_states[chat_id]["telegram_id"] = telegram_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ user_states

        added_sub = add_subscription_sqlalchemy(
            user_id=chat_id,
            telegram_id=str(telegram_id),
            telegram_handle=f"@{call.from_user.username}" if call.from_user.username else "",
            phone_number="",
            service_name=f"{days} –¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
            province=data.get('province', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            procedure=data.get('procedure_val', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            addresses=data.get('addresses', ['ALL_OFFICES']),
            subscription_days=days,
        )

        bot.send_message(
            chat_id,
            "‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞* üéâ\n\n"
            f"üìå *–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:* {escape_markdown(data.get('procedure_val', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
            f"üìç *–ü—Ä–æ–≤–∏–Ω—Ü–∏—è:* {escape_markdown(data.get('province', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
            f"üè¢ *–û—Ç–¥–µ–ª–µ–Ω–∏–µ:* {escape_markdown(', '.join(data.get('addresses', ['ALL_OFFICES'])))}\n"
            f"üìÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* {escape_markdown(expiration_date)}\n\n"
            "_–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞_",
            parse_mode="MarkdownV2"
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(chat_id, None)

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
